package main

import (
	"bufio"
	"context"
	"encoding/json"
	"fmt"
	"os"
	"strings"

	"github.com/cloudwego/eino-ext/components/model/openai"
	"github.com/cloudwego/eino/components/prompt"
	"github.com/cloudwego/eino/schema"

	"github.com/flosch/pongo2/v5"
)

func main() {
	// 创建模板，使用 FString 格式
	template := prompt.FromMessages(schema.FString,
		// 系统消息模板
		schema.SystemMessage("你是一个{role}。你需要专业切合实际地回答（最终目标是使简历更容易通过筛选）。你的目标是帮助求职者生成一份专业严谨的简历， 你将根据简历模版（jinja格式）返回对应的json数据， 如果模版有些内容用户没有提供，则帮它生成（可自己扩写）"),

		// 插入需要的对话历史（新对话的话这里不填）
		schema.MessagesPlaceholder("chat_history", true),

		// 用户消息模板
		schema.UserMessage("简历模版: {template}\n基本信息:{basic_info}\n工作经历:{work}\n项目简历:{demo}\n个人评价:{comment}\n获奖情况:{score}\n岗位信息:{info}"),
	)

	var prompt map[string]any = make(map[string]any)
	prompt["role"] = "简历生成专家"

	reader := bufio.NewReader(os.Stdin)

	tpl, _ := os.ReadFile("template.md")
	prompt["template"] = string(tpl)

	fmt.Println("请输入你的基本信息（姓名、年龄、学历、联系方式等）：")
	basic, _ := reader.ReadString('\n')
	prompt["basic_info"] = basic

	fmt.Println("请输入你的工作经历（公司名称、职位、工作时间、工作内容等）：")
	work, _ := reader.ReadString('\n')
	prompt["work"] = work

	fmt.Println("请输入你的项目经历（项目名称、角色、时间、项目描述等）：")
	demo, _ := reader.ReadString('\n')
	prompt["demo"] = demo

	fmt.Println("请输入你的个人评价：")
	comment, _ := reader.ReadString('\n')
	prompt["comment"] = comment

	fmt.Println("请输入你的获奖情况：")
	score, _ := reader.ReadString('\n')
	prompt["score"] = score

	fmt.Println("请输入目标岗位信息：")
	info, _ := reader.ReadString('\n')
	prompt["info"] = info

	// 使用模板生成消息
	messages, err := template.Format(context.Background(), prompt)
	if err != nil {
		fmt.Println(err)
		return
	}

	ctx := context.Background()

	chatModel, err := openai.NewChatModel(ctx, &openai.ChatModelConfig{
		Model:   "gpt-4o",
		BaseURL: "https://api.vveai.com/v1",
		APIKey:  "sk-Xs5rROO2htFLGMJh407b42F505Fe4c89A8510f7608E52c2f",
	})

	if err != nil {
		fmt.Println(err)
		return
	}

	res, err := chatModel.Generate(ctx, messages)
	if err != nil {
		fmt.Println(err)
		return
	}

	// 将生成的JSON写入文件
	err = Write("template.md", "./resume.txt", res.Content)
	if err != nil {
		fmt.Println("写入文件失败:", err)
		return
	}
	fmt.Println("简历生成成功！")
}

func Write(inputPath string, outputPath string, jsonStr string) error {
	var data map[string]interface{}

	jsonStr, _ = strings.CutPrefix(jsonStr, "```json")
	jsonStr, _ = strings.CutSuffix(jsonStr, "```")

	if err := json.Unmarshal([]byte(jsonStr), &data); err != nil {
		fmt.Println("666")
		return err
	}

	tpl := pongo2.Must(pongo2.FromFile("template.md"))

	output, err := tpl.Execute(pongo2.Context(data))

	if err != nil {
		return err
	}
	file, _ := os.Create(outputPath)
	defer file.Close()

	file.Write([]byte(output))
	return nil
}
